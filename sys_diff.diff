*** /home/kern/build/linux-5.14.5/kernel/sys.c	Sat Dec 25 13:14:24 2021
--- /home/kern/build/stock_kernel/kernel/sys.c	Tue Nov 23 05:17:13 2021
***************
*** 72,79 ****
  #include <asm/io.h>
  #include <asm/unistd.h>
  
- #include <linux/mutex.h>
- 
  #include "uid16.h"
  
  #ifndef SET_UNALIGN_CTL
--- 72,77 ----
***************
*** 202,322 ****
  	return error;
  }
  
- #define N 100
- 
- long* q ;
- int front = -1 ;
- int back = -1 ;
- 
- static DEFINE_MUTEX(lock);
- 
- int enq(long num){
- 
- 	int ret ;
- 
-     if( front == -1 ){ 
- 
- 		front = 0 ; back++ ;
- 		q[back] = num ;
- 		ret = 0 ;  
-     }
- 
-     else if((back+1)%N == front){
-         ret = -1 ;
-     }
- 
-     else{
-         back++ ;  q[back] = num ;
- 		ret = 0 ;
-     }
- 
-     return ret ;
- }
- 
- long deq(void){
- 
- 	long num ;
- 
- 	if(front == -1){
-         return -1 ;
-     }
- 
-     num = q[front] ;
- 
-     if(front==back){
-         front = -1 ;
-         back = -1 ;
-     }
- 
-     else{
-         front = (front+1) % N ;
-     }
-     return num ;
- }
- 
- 
- 
- SYSCALL_DEFINE0(init)
- {
- 	 q = (long*)kmalloc(N*sizeof(long),GFP_KERNEL);
- 
- 	 if(q==NULL){return -1 ;}
- 	 
- 	 return 0 ;
- }
- 
- SYSCALL_DEFINE1(writer, long , num )
- {
- 	int ver ;
- 
- 	mutex_lock(&lock);
- 	ver = enq(num) ;
- 	mutex_unlock(&lock);
- 
- 	return ver ;
- }
- 
- SYSCALL_DEFINE1(reader, long* , num )
- {	
- 	long temp ;
- 	int ver ;
- 
- 	mutex_lock(&lock);
- 	temp = deq() ;
- 	mutex_unlock(&lock);
- 
- 	ver = copy_to_user(num,&temp,sizeof(long));
- 
- 	return ver  ;
- }
- 
- SYSCALL_DEFINE3(kernel_2d_memcpy, float*,src,float*,dest,int,count)
- {
-     float* arr = (float*)kmalloc(count,GFP_KERNEL);
-  	int ret_val ;
-  
-  	if(!arr){
-  	    return -ENOMEM;
-  	}
-  
-     if((!access_ok(src,count))||(!access_ok(dest,count))){
-         kfree(arr);
-         return -EFAULT;
-     }
- 
-     ret_val = copy_from_user(arr,src, count);
-  
-     if(ret_val > 0){ kfree(arr); return -EFAULT ; }
-  
-     ret_val = copy_to_user (dest,arr,count);
-  
-     if(ret_val > 0){ kfree(arr); return -EFAULT ; }
-  
-  	kfree(arr);
-  
-     return 0;
- }
- 
  SYSCALL_DEFINE3(setpriority, int, which, int, who, int, niceval)
  {
  	struct task_struct *g, *p;
--- 200,205 ----
